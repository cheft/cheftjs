[
    {
        "time": "2015-02-08T09:05:13.000Z",
        "id": 1423386313,
        "title": "Muffin",
        "content": "# Muffin=FIS+Browserify\n\n## 前言\n\n这段时间在做前端架构设计，需要选个好用的前端构建方案，之前[公司网站](http://www.zyeeda.com)有用过 [fis-pure](https://github.com/fex-team/fis-pure) ，因为这次需要用到 node 环境的一些自动化测试框架，pure 不太适合，因此就萌生出 [FIS](http://fis.baidu.com/) 集成 [Browserify](http://browserify.org/) 的想法。\n\n## 特色\n\n### 简化安装\n执行 __npm install -g fis-muffin__ 命令便可安装\n\n### 多语言支持\nmuffin 天生支持 __less__、__scss__、__coffee__、__react__ 多种语言\n\n### NPM 管理库\n项目采用 npm 管理 js 库依赖，方式跟 node 完全一样，下面是 [muffin-demo](https://github.com/cheft/muffin-demo) 的 package.json 配置；有了它，只要执行 __npm install__ 可安装所有依赖库\n\n```js    \n    {\n      \"name\": \"muffin-demo\",\n      \"version\": \"1.0.0\",\n      \"description\": \"fis-muffin demo\",\n      \"author\": \"cheft\",\n      \"license\": \"ISC\",\n      \"devDependencies\": {\n        \"coffee-reactify\": \"^2.1.0\"\n      },\n      \"dependencies\": {\n        \"jquery\": \"^2.1.3\",\n        \"bootstrap\": \"^3.3.1\",\n        \"react\": \"^0.12.2\"\n      }\n    }\n```\n> 如果你还要用到其它库，比如 underscore，可以用 __npm install underscore --save__ 安装\n> \n> 或者你要用到其它插件，如 reactify，可以用 __npm install reactify --save-dev__ 安装\n\n\n### 集成 Browserify\nBrowserify 可以让你使用类似于 node 的 requrie 方式来实现浏览器端 JavaScript 代码模块化\n\n```js\n    // hello.js\n    var hello = function(name) {\n        return 'Hello ' + name;\n    }\n\n    module.exports = hello;\n```\n\n\n```js\n    //index.js\n    var $ = require('jquery');\n    var hello = require('./hello');\n\n    $('body').append('<div>' + hello('Muffin') + '</div>');\n```\n\nmuffin 默认是以 src/index.js 为入口文件，当然通过配置也可以修改\n\n  ```js\n       module.exports = {\n          settings: {\n              browserify: {\n                  main: 'index.coffee',  // 入口文件\n                  output: '_app.js',  // browserify 输出文件，不建议修改\n                  transform: 'coffee-reactify', // browserify 插件，可支持数组\n                  extension: '.coffee' // browserify 所要处理的文件\n              }\n          }\n      }\n  ```\n> browserify 支持多种插件，常用的有 __coffee-reactify__、__reactify__ 等\n\n### 命令简化\n只需 __mfn__ 简单命令便可发布，__mfn start__ 即开启浏览器预览\n\n![命令简化](res/assets/imgs/command.jpg)\n\n<table>\n  <tr>\n    <th style=\"width: 30%;text-align: left;\">FIS 命令</th><th style=\"width: 30%;text-align: left;\">Muffin 命令</th><th style=\"width: 40%;text-align: left;\">作用</th>\n  </tr>\n  <tr>\n    <td>fis release</td><td>mfn</td><td>简单发布</td>\n  </tr>\n  <tr>\n    <td>fis release -w</td><td>mfn w</td><td>发布并监视</td>\n  </tr>\n  <tr>\n    <td>fis release -wL</td><td>mfn wL</td><td>发布并监视浏览器刷新</td>\n  </tr>\n  <tr>\n    <td>fis release -op</td><td>mfn op</td><td>压缩打包</td>\n  </tr>\n  <tr>\n    <td>fis release -opm</td><td>mfn opm</td><td>压缩打包并加上md5文件戳</td>\n  </tr>\n  <tr>\n    <td>fis server start</td><td>mfn start</td><td>启动服务打开浏览器</td>\n  </tr>\n  <tr>\n    <td>fis server stop</td><td>mfn stop</td><td>停止服务</td>\n  </tr>\n  <tr>\n    <td>fis server open</td><td>mfn open</td><td>打开发布目录</td>\n  </tr>\n  <tr>\n    <td>fis server clean</td><td>mfn clean</td><td>清理发布目录</td>\n  </tr>\n</table>\n\n> 如果上面命令不符合你的习惯，可以自己设置\n\n```js\n  module.exports = {\n        settings: {\n            command: {\n                '': 'release -b',\n                'w': 'release -bw',\n                'wL': 'release -bwL',\n                'op': 'release -bop',\n                'opm': 'release -bopm',\n                'start': 'server start',\n                'stop': 'server stop',\n                'open': 'server open'\n                'clean': 'server clean'\n            }\n        }\n    }\n```\n\n### CSS 模块化\n不仅 js 可以模块化，css 同样可以。muffin 的静态资源目录是 assets，其中的样式文件都约定了 id。 因此在 css 或 js 中可通过 id 来引用样式文件：\n\n```js\n  /*\n  * @require bootstrap.css\n  */\n```\n\n在 coffee-script 中：\n\n```coffee\n    ###\n    @require todo/todo.css\n    ###\n```\n\n在 html 中：\n\n```html\n    <!-- @require index.css -->\n```\n\n如果觉得 muffin 提供的默认配置不符合需求，也可以自己配置：\n\n```js\nmodule.exports = {\n    roadmap: {\n        path: [\n            {\n              reg : /^\\/modules\\/([^\\/]+)\\/assets\\/index\\.(css|scss|sass|less)$/i,\n              id : 'modules/$1.css',\n              release : 'css/$1/index.css'\n          },\n          {\n              reg : /^\\/modules\\/([^\\/]+)\\/assets\\/(.*)$/i,\n              release : 'img/$1/$2'\n          }\n        ]\n    }\n}\n```\n> 以上配置是将静态资源放在 modules 目录的每个模块下，每个模块自己管理静态资源；其它配置可自己扩展\n\n### 性能优化\n通过 __mfn op__ 命令可将 js 打包一个文件，css 也打包一个文件；一些细碎的图片(特别是svg)，建议 直接内嵌到css中，可大幅减少请求数量，提升前端性能。\n\n![性能优化](res/assets/imgs/chrome.jpg)\n\n> 图中所请求图片资源其实是内嵌在css中，具体用法可看 [fis官方文档](http://fis.baidu.com/docs/more/fis-standard-inline.html#css)\n\n### 文件监视 & 自动刷新\n虽然集成了 Browserify，Muffin 也同样支持 watch 和 livereload 模式，而且速度还是很快。执行 __mfn wL__ 命令来启用。\n\n### 支持 SourceMap\n开发模式中，会自动加入 sourcemap，方便调试，可直接定位到源代码，使用 __mfn op__ 发布则会去掉 sourcemap\n\n### 发布目录整理\n执行 __mfn deploy__ 可将项目输出至 __./public__ 目录，目录非常整洁。\n\n![发布目录整理](res/assets/imgs/file.jpg)\n\n### 自动测试\n使用 Browserify 方式，一些代码可直接运行在 node 环境上；当然这样可以很轻松地模拟浏览器环境，做到自动化测试；常用的测试框架如 [jest](http://facebook.github.io/jest/docs/tutorial.html)\n\n### 更多特色\n因为 Muffin 是基于 FIS 二次开发，所有 FIS 的功能，如：静态资源加 md5 戳 & cdn 部署 等功能都能使用；具体请查看 [FIS 文档](http://fis.baidu.com/docs/beginning/getting-started.html)。\n\n## 体验\n\n如果你对这些 __特色__ 感兴趣，那么就从一个简单的 demo 开始体验 muffin 吧\n\n* 安装 muffin\n\n```bash\n    npm install -g fis-muffin\n```\n\n* 下载 demo\n\n```bash\n    git clone https://github.com/cheft/muffin-demo.git\n```\n\n* 进入 muffin-demo 目录，安装第三方依赖库\n\n```bash\n    npm install\n```\n\n* 发布代码\n\n```bash\n    mfn\n```\n\n*启动服务并打开浏览器预览\n\n```bash\n    mfn start\n```\n\n## Roadmap\n* 发布三种模式的源代码 __requirejs-seed__ 、__browserify-seed__、__global-seed__\n* 更多等待您的反馈\n"
    },
    {
        "time": "2015-02-08T09:05:13.000Z",
        "id": 1423386314,
        "title": "READMEOLD",
        "content": "# fis-muffin\nFIS browerify 解决方案\n\n## 使用\n\n<table>\n  <tr>\n    <th>FIS 命令</th><th>Muffin 对应命令</th><th>作用</th>\n  </tr>\n  <tr>\n    <td>fis release</td><td>mfn</td><td>简单发布</td>\n  </tr>\n  <tr>\n    <td>fis release -w</td><td>mfn w</td><td>发布并监视</td>\n  </tr>\n  <tr>\n    <td>fis release -wL</td><td>mfn wL</td><td>发布并监视浏览器刷新</td>\n  </tr>\n  <tr>\n    <td>fis release -op</td><td>mfn op</td><td>压缩打包</td>\n  </tr>\n  <tr>\n    <td>fis release -opm</td><td>mfn opm</td><td>压缩打包并加上md5文件戳</td>\n  </tr>\n  <tr>\n    <td>fis server start</td><td>mfn start</td><td>启动服务打开浏览器</td>\n  </tr>\n  <tr>\n    <td>fis server stop</td><td>mfn stop</td><td>停止服务</td>\n  </tr>\n  <tr>\n    <td>fis server open</td><td>mfn open</td><td>打开发布目录</td>\n  </tr>\n  <tr>\n    <td>fis server clean</td><td>mfn clean</td><td>清理发布目录</td>\n  </tr>\n</table>\n\n## 特点\n* FIS 集成 browerify，具备两工具功能，前端代码从此可以用 node 框架进行测试了\n* 简化命令行（`mfn = fis release`）并支持自定义，妈妈再也不用担心我 release 和 server 敲混了\n* `coffee`、`react`、`coffee&react` 语言支持，没有插件支持的告诉我，我来帮你写\n* `sass`、`less` 样式语言支持\n* 采用 node 方式代码模块化，写前端跟写 nodejs 后端一样的爽\n* 代码库采用 npm 管理，`npm install jquery --save` 一条命令搞定一个库\n* 所有 js 压缩打包成一个，不只；所有 css 压缩也能打包成一个，静态资源的路径自动更新哟\n* 图片优化压缩、碎小图片支持内嵌，fis 有的它都有\n* 发布后日志语句自动删除\n* 发布目录通过配置重新整理，还你干干净净\n* 支持 `watch` 方式开发，一边敲代码，一旁浏览器即时刷新；最重要的是编译性能非常之快\n* 支持在 js 中直接引入 css，没想到 css 也能模块化了，也不用担心忘记加载了\n\n## 进行中\n* 考虑支持编译预处理\n* 考虑支持引入 amd 、cmd、node 、global 的代码库\n* 考虑发布后提供 `requirejs-seed` 、`browserify-seed`、`global-seed`\n\n## 安装\nnpm install -g fis-muffin\n\n## 目录结构\n    webapp\n      --assets\n        --index.css\n        --bg.png\n      --src (模块化代码库)\n        --index.js\n      --fis-conf.js\n      --index.html\n\n> 建议用此目录结构，当然你可以通过 fis-conf.js 修改\n\n> 在index.html的 head末尾加入以下代码 <!-- @require index.css --><!--STYLE_PLACEHOLDER--> 表示引入 css，\n> body末尾加入以下代码<!-- @require app --><!--SCRIPT_PLACEHOLDER--><!--RESOURCEMAP_PLACEHOLDER--> 表示引入 js\n\n## fis-conf配置\n\n    module.exports = {\n        settings: {\n            command: {\n                ...\n            },\n            browserify: {\n                ...\n            }\n        },\n        roadmap: {\n            ext: {\n                coffee: 'js'\n            },\n            path: [\n                {\n                  ... \n                }\n            ]\n        }\n    }\n    fis.config.set('project.exclude', [...]);\n\n\n## 命令配置\n\n    module.exports = {\n        settings: {\n            command: {\n                '': 'release -b',\n                'w': 'release -bw',\n                'wL': 'release -bwL',\n                'op': 'release -bop',\n                'opm': 'release -bopm',\n                'start': 'server start',\n                'stop': 'server stop',\n                'open': 'server open'\n                'clean': 'server clean'\n            }\n        }\n    }\n\n## browserify 配置\n\n    module.exports = {\n        settings: {\n            browserify: {\n                main: 'index.coffee',\n                output: '_app.js',  //不建议修改\n                transform: 'coffee-reactify',\n                extension: '.coffee'\n            }\n        }\n    }\n\n> 如果使用 browserify 的插件，如 coffee-reactify，需另外安装：npm install coffee-reactify --save-dev\n"
    },
    {
        "time": "2015-02-05T10:03:36.000Z",
        "id": 1423130616,
        "title": "深圳的夜空多少璀璨",
        "content": "摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n\n摘要：Bowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。\n【编者按】Go语言自从面世就受到了很多开发者的欢迎，越来越多的项目基于Go语言实现，例如非常著名的云计算项目Docker。而本文作者分享了其从Node.js转到Go语言后，整个开发平台的性能得到显著提升，并从中总结出Go的六大亮点。\n\n以下为译文：\n\nBowery是一个基于云技术的开发平台，强大的协同处理技术让即使分散各地的团队成员都能无缝地进行工作。在2014年进行的一次由Node.js转到Go的变更中，Bowery获得了不错的性能提升。那么Go有哪些亮点值得开发者关注的呢？\n\n\n\n强大的跨平台编程能力\n\nBowery团队指出Go能很方便地在不同系统里进行程序编译，这是他们转入Go的重要原因之一。\n\n作为开发平台，对Linux，Windows，OSX等常见操作系统提供支援是能否吸引开发者的基本要素。在Go中，开发者可以针对不同操作系统定义不同的文件来实现相同的功能函数。Bowery团队成员Larz在创建Prompt应用（命令行输入）时，就是借助Go而轻松实现了跨平台编译。而开发者要做的，就是设置好不同的环境变量。\n\n快速部署\n\n在Go平台中，从测试环境到真实环境的切换是非常便捷的，因为它无需额外的系统依赖。特别是对于Bowery提供给用户的命令行工具来说，用户无需安装Java，RVM或者NPM等工具便可正常运行。\n\n并发处理\n\nNode.js在并发处理方面处于劣势，仅有I/O程序或计时器运行在并发模式。因此如果希望打造一个快速响应的跨程序通讯系统，Go无疑是更好的选择。Go提供了低级别的并发处理基元，例如mutexes、wait groups等等。\n\n整合测试框架\n\n如果希望找到一个标准化的整合测试框架，不妨进入Go来体验一番，它内建了完整的测试包，免去了四处寻找的麻烦。如果想编写一个新的测试套件，只要把_test.go文件添加到相同的包里就可以了。有关Go测试的更多信息，请点击这里进行访问。\n\n标准库\n\nGo提供了标准库，标准库的好处是无需包含其他扩展库，从而能节省开发时间并且还提高了健壮性。\n\n强大的开发者工作流工具\n\nGo的工作区界面能帮助建立标准化的工作流，虽然这或许会压缩了开发的自由度，但得到的是一个结构化的有条理的工作区：该区有三个根目录，src用于放置源码包，pkg用于放置编译包，bin放置的是执行文件。把源码和依赖文件集中存储的好处是使团队成员都有一个相同的文档结构，而不会出现杂乱的文档情况。此外gofmt能以相同风格对代码进行格式化，这是一个非常实用的功能。所以一旦需要进行调试，只需集中精力解决当前问题而无需分心处理结构或风格等琐碎问题。\n\n最后总结几点Go语言学习心得，希望对新接触Go语言的开发者有所帮助：\n\n经常访问官方博客，获取最新Go资讯；\n经常访问官方教学文档；\n建议浏览Ardan工作室成员Bill Kennedy的Go编程博客；\nGo by Example上有大量的实例，能帮助开拓视野；\nGopherAcademy有很多有关Go最佳实践的文章。\n英文来自：Moving from Node.js to Go at Bowery\n"
    },
    {
        "time": "2015-02-05T10:03:30.000Z",
        "id": 1423130610,
        "title": "你是我的小呀小苹果",
        "content": "编者按：DevOps和敏捷资深专家Mirco Hering日前在个人博客上分享了自己的团队建设经验，如果你正遇到运维等方面的困难，不妨看下Hering是如何一步步科学解决问题的。以下为原文：\n\n这些年来，我发现这样一种现象：每当团队发展到DevOps即将成熟时，就会有这样的趋势，且称之为成熟前的曲折之路吧。近来，我曾使用一个前一段时间设计的DevOps模型，试图对这个过程进行阐述，然后发现随着云基础DevOps的出现，这个模型必须得更新了。所以我觉得应该跟大家分享一下，也听听别人的想法。令人惊讶的是在许多不同的工作环境中，比如在部署自动化、测试自动化还有许多其他情况下，都会出现这样的模式。在本文中，我会仅仅用部署自动化方案作为例子，但是请相信：这种模式同样适用于其他的技术方面。\n\n这是我目前的模型，也是很长一段时间我跟许多客户和同事分享过的一个模型：\n\n\n\n第一阶段：“按部就班的完成一切”——每次都按照列表逐步完成。或部署、或测试、或其他随便什么，只要归属于日常工作，都按表单逐步完成。在这个层次中，性能并没有太大优化，一切任务都完成地非常机械。\n\n第二阶段：“必要工作遵循手册”——经过一段时间以后，我们发现：如果在任务执行前先做一个快速的影响评估，并且按照评估结果只完成那些必需的步骤，那么有很多步骤就可以直接跳过了（像是：不重新部署未更改的组件，或者不测试那些未更改的功能）。然而我们身处的这个时代，经过评估的每个部署看起来都不一样——如果资源流动太快，或者人员频繁更替，总是使用缺乏完成可靠评估所需技能和知识的新手，那么在这一阶段中，实际执行起来也会相当困难。\n\n第三阶段：“自动化”——接着我们发现了自动化。但是，评估影响的自动化比通用步骤的自动化要复杂得多，因此每次我们都需要返回最初，重新运行所有的步骤。这样做减少了部署的工作量，但有可能会影响实际运行的持续时间。\n\n第四阶段：“性能优化”——一旦掌握了自动化，我们开始寻求相应的优化方案。我们发现了这样的策略：只确认每个活动所必需的步骤，建立并执行动态的自动化脚本。这样一来我们减少了工作量，同时也不断降低着总花费时间。在执行的自动化方法切实可靠的基础上，我们使得整体结构逐步优化。\n\n到这里我的故事通常就结束了，而且我会告诉你这是一个优化的最终状态，不会真正地再误入歧途。不过我认为，基于云的DevOps会更进一步，这使得我必须更新模型来适应：\n\n\n\n在这个新模型中，我们需要再次运行之前的所有步骤。让我来解释一下：在自动化部署的情况下，不仅需要将所需的增量变化添加到环境中，而且需要完全实例化环境（以代码作为基础架构）。在自动化测试的情况下，则需要创建多个并行环境，同时执行多个测试以节省时间，取代在评估影响的基础上建立多个测试子集的测试形式。我们现在可以负担起这样奢侈的运行方式，因为我们在模型中遇到了新的壁垒，我称之为云壁垒。\n\n诚实点来讲，我早就该做这个更新了，这也显示了这样的道理：如果很长一段时间你都使用同一个模型工作的话，就无法在它过时的时候意识到这一点，而只会一直尝试让它符合现实情况。希望更新后的模型也能帮你明确你的企业规划。通往DevOps成熟的道路虽然曲折，却是有捷径可寻的，但就如攀登险峰时一般，捷径往往会更险峻，耗费更多的体力。期待在“峰顶”与你相见！\n\n原文链接：The Winding Road to DevOps Maturity（译者/李贻丽 责编/钱曙光）\n"
    }
]
