// Generated by CoffeeScript 1.9.1
var slice = [].slice;

(function(root, factory) {
  var riot;
  if (typeof define === 'function' && define.amd) {
    return define(['riot'], function(riot) {
      return factory(root, riot);
    });
  } else if (typeof exports === 'object') {
    riot = require('riot');
    return module.exports = factory(root, riot);
  } else {
    return root.Cheft = factory(root, root.riot);
  }
})(window, function(root, riot) {
  var C, Cheft, fn, i, item, len, toString, types;
  C = Cheft = {
    version: '1.0.0'
  };
  C.riot = riot;
  toString = Object.prototype.toString;
  types = ['Function', 'Object', 'String', 'Array', 'Number', 'Boolean', 'Date', 'RegExp', 'Undefined', 'Null'];
  fn = function(item) {
    return C["is" + item] = function(obj) {
      return toString.call(obj) === ("[object " + item + "]");
    };
  };
  for (i = 0, len = types.length; i < len; i++) {
    item = types[i];
    fn(item);
  }
  C.extend = function() {
    var j, key, len1, mixin, mixins, target, value;
    target = arguments[0], mixins = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (!target) {
      return target;
    }
    for (j = 0, len1 = mixins.length; j < len1; j++) {
      mixin = mixins[j];
      for (key in mixin) {
        value = mixin[key];
        target[key] = value;
      }
    }
    return target;
  };
  return Cheft;
});
